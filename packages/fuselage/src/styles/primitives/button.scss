@use 'sass:map';
@use '../lengths';
@use '../functions';
@use '../mixins/states.scss';
@use '../mixins/shadows.scss';
@use '../variables/button-colors';

@mixin kind-variant($colors) {
  color: map.get($colors, color);
  border-width: functions.theme(
    'button-border-width',
    lengths.border-width('default')
  );
  border-style: solid;
  border-color: map.get($colors, border-color);
  border-radius: functions.theme(
    'button-border-radius',
    lengths.border-radius(medium)
  );
  background-color: map.get($colors, background-color);

  appearance: none;

  @include states.on-focus-visible {
    border-color: map.get($colors, focus-border-color);
    background-color: map.get($colors, focus-background-color);
    @include shadows.use-button-focus-shadow(
      map.get($colors, focus-shadow-color)
    );
  }

  @include states.on-hover {
    border-color: map.get($colors, hover-border-color);
    background-color: map.get($colors, hover-background-color);
    @include shadows.use-no-shadow;
  }

  @include states.on-active {
    border-color: map.get($colors, active-border-color);
    background-color: map.get($colors, active-background-color);
    @include shadows.use-no-shadow;
  }

  @include states.on-pressed {
    color: map.get($colors, pressed-color);
    border-color: map.get($colors, pressed-border-color);
    background-color: map.get($colors, pressed-background-color);
  }
  @include states.on-disabled {
    color: map.get($colors, disabled-color);
    border-color: map.get($colors, disabled-border-color);
    background-color: map.get($colors, disabled-background-color);

    .rcx-button--content {
      transform: none !important;
    }
  }
}
